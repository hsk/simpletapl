tag(none,zero,variant([none:nat,some:nat])):variant([none:nat,some:nat])
zero:nat
fn(x,bot,x):arr(bot,bot)
fn(x,bot,app(x,x)):arr(bot,bot)
fn(x,variant([a:bool,b:bool]),x):arr(variant([a:bool,b:bool]),variant([a:bool,b:bool]))
fn(x,top,x):arr(top,top)
fn(x,top,x):top
fn(x,top,x):arr(top,top)
fn(z,top,z):top
hello:string
unit:unit
record([x=true,y=false]):record([x:bool,y:bool])
true:bool
record([1=true,2=false]):record([1:bool,2:bool])
true:bool
record([x=true,y=false,a=false]):record([x:top,y:bool])
true:bool
false:bool
6.28318:float
tfn(X,top,fn(x,X,x)):all(X,top,arr(X,X))
tfn(X,arr(top,top),fn(x,X,app(x,x))):all(X,arr(top,top),arr(X,top))
fn(x,bool,x):arr(bool,bool)
error:bool
error:bot
error:bool
fn(x,nat,succ(x)):arr(nat,nat)
succ(succ(succ(zero))):nat
T :: *
fn(f,T,fn(x,nat,app(f,app(f,x)))):arr(T,arr(nat,nat))
CounterRep :: *
SetCounter :: *
setCounterClass : arr(CounterRep,arr(arr(unit,SetCounter),arr(unit,SetCounter)))
newSetCounter : arr(unit,SetCounter)
c : SetCounter
succ(zero):nat
InstrCounter :: *
InstrCounterRep :: *
instrCounterClass : arr(InstrCounterRep,arr(arr(unit,InstrCounter),arr(unit,InstrCounter)))
newInstrCounter : arr(unit,InstrCounter)
ic : InstrCounter
succ(zero):nat
zero:nat
unit:unit
succ(succ(zero)):nat
succ(zero):nat
instrCounterClass : arr(InstrCounterRep,arr(arr(unit,InstrCounter),arr(unit,InstrCounter)))
ResetInstrCounter :: *
resetInstrCounterClass : arr(InstrCounterRep,arr(arr(unit,ResetInstrCounter),arr(unit,ResetInstrCounter)))
BackupInstrCounter :: *
BackupInstrCounterRep :: *
backupInstrCounterClass : arr(BackupInstrCounterRep,arr(arr(unit,BackupInstrCounter),arr(unit,BackupInstrCounter)))
newBackupInstrCounter : arr(unit,BackupInstrCounter)
ic : BackupInstrCounter
succ(succ(zero)):nat
succ(succ(zero)):nat
succ(succ(succ(zero))):nat
succ(succ(zero)):nat
succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))):nat
CounterRep :: *
SetCounter :: *
SetCounterMethodTable :: *
packGet : arr(arr(unit,nat),variant([none:unit,some:arr(unit,nat)]))
unpackGet : arr(SetCounterMethodTable,arr(unit,nat))
packSet : arr(arr(nat,unit),variant([none:unit,some:arr(nat,unit)]))
unpackSet : arr(SetCounterMethodTable,arr(nat,unit))
packInc : arr(arr(unit,unit),variant([none:unit,some:arr(unit,unit)]))
unpackInc : arr(SetCounterMethodTable,arr(unit,unit))
setCounterClass : arr(CounterRep,arr(SetCounterMethodTable,unit))
CounterRep :: *
SetCounter :: *
setCounterClass : all(M,SetCounter,all(R,CounterRep,arr(ref(arr(R,M)),arr(R,SetCounter))))
newSetCounter : arr(unit,SetCounter)
c : SetCounter
succ(zero):nat
unit:unit
unit:unit
succ(succ(succ(succ(zero)))):nat
setCounterClass : all(M,SetCounter,all(R,CounterRep,arr(ref(arr(R,M)),arr(R,SetCounter))))
InstrCounter :: *
InstrCounterRep :: *
instrCounterClass : all(M,InstrCounter,all(R,InstrCounterRep,arr(ref(arr(R,M)),arr(R,InstrCounter))))
newInstrCounter : arr(unit,InstrCounter)
ic : InstrCounter
succ(zero):nat
zero:nat
unit:unit
succ(succ(zero)):nat
succ(zero):nat

James Reily's alternative:

Counter :: *
inc3 : arr(Counter,unit)
SetCounter :: *
InstrCounter :: *
CounterRep :: *
InstrCounterRep :: *
dummySetCounter : SetCounter
dummyInstrCounter : InstrCounter
setCounterClass : arr(CounterRep,arr(source(SetCounter),SetCounter))
newSetCounter : arr(unit,SetCounter)
instrCounterClass : arr(InstrCounterRep,arr(source(InstrCounter),InstrCounter))
newInstrCounter : arr(unit,InstrCounter)
c : InstrCounter
succ(succ(succ(succ(zero)))):nat
succ(succ(succ(succ(succ(zero))))):nat
succ(succ(succ(succ(zero)))):nat
