hello:string
(fn(x:A)->x):(A->A)
6.28318:float
(fn(x:bool)->x):(bool->bool)
true:bool
(fn(x:nat)->succ(x)):(nat->nat)
succ(succ(succ(0))):nat
T::(*)
(fn(f:T)->fn(x:nat)->f$(f$x)):(T->nat->nat)
(fn(f:rec(X,(A->A)))->fn(x:A)->f$x):(rec(X,(A->A))->A->A)
{[x=true,y=false]}:{[x:bool,y:bool]}
true:bool
{[1=true,2=false]}:{[1:bool,2:bool]}
true:bool
(fn(x:[[a:bool,b:bool]])->x):([[a:bool,b:bool]]->[[a:bool,b:bool]])
Counter::(*)
p:{[get:nat,inc:(unit->Counter)]}
0:nat
p:Counter
succ(0):nat
p:rec(P,{[get:nat,inc:(unit->P)]})
succ(succ(0)):nat
get:(Counter->nat)
inc:(Counter->unit->rec(P,{[get:nat,inc:(unit->P)]}))
succ(succ(0)):nat
p:rec(P,{[get:nat,inc:(unit->P)]})
succ(succ(succ(0))):nat
Hungry::(*)
f0:(nat->nat->Hungry)
f1:(nat->Hungry)
f2:Hungry
T::(*)
fix_T:((T->T)->T)
true:bool
unit:unit
NatList::(*)
error:typeof([NatList::rec(X,[[nil:unit,cons:{[1:nat,2:X]}]])],tag(nil,unit))
nil:NatList
error:typeof([l:NatList,n:nat,nil:NatList=tag(nil,unit)as NatList,NatList::rec(X,[[nil:unit,cons:{[1:nat,2:X]}]])],tag(cons,{[1=n,2=l]}))
cons:(nat->NatList->NatList)
isnil:(NatList->bool)
hd:(NatList->nat)
tl:(NatList->NatList)
plus:(nat->nat->nat)
sumlist:(NatList->nat)
mylist:NatList
succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(0)))))))))):nat
