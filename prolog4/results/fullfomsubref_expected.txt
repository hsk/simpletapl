(fn(x:bot)->x):(bot->bot)
(fn(x:bot)->x$x):(bot->bot)
(fn(x:[[a:bool,b:bool]])->x):([[a:bool,b:bool]]->[[a:bool,b:bool]])
(fn(x:top)->x):(top->top)
(fn(x:top)->x):top
(fn(x:top)->x):(top->top)
(fn(z:top)->z):top
hello:string
unit:unit
{[x=true,y=false]}:{[x:bool,y:bool]}
true:bool
{[1=true,2=false]}:{[1:bool,2:bool]}
true:bool
{[x=true,y=false,a=false]}:{[x:top,y:bool]}
true:bool
false:bool
6.28318:float
(fn(X::top)=>fn(x:X)->x):(all(X::top)=>X->X)
(fn(X::(top->top))=>fn(x:X)->x$x):(all(X::(top->top))=>X->top)
(fn(x:bool)->x):(bool->bool)
error:bool
error:bot
error:bool
(fn(x:nat)->succ(x)):(nat->nat)
succ(succ(succ(0))):nat
T :: *
(fn(f:T)->fn(x:nat)->f$(f$x)):(T->nat->nat)
CounterRep :: *
SetCounter :: *
setCounterClass : CounterRep->(unit->SetCounter)->unit->SetCounter
newSetCounter : unit->SetCounter
c : SetCounter
(let(r)={[x=ref(succ(0))]}in fix(setCounterClass$r)$unit)#get$unit:nat
InstrCounter :: *
InstrCounterRep :: *
instrCounterClass : InstrCounterRep->(unit->InstrCounter)->unit->InstrCounter
