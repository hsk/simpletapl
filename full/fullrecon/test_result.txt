recon:let x = true in x;[]
recon:true;[]
true : Bool
recon:lambda x:Bool.x;[]
recon:x;[x : Bool]
lambda x:Bool.x : Bool -> Bool
recon:(lambda x:Bool -> Bool.if x false then true else false) (lambda x:Bool.if x then false else true);[]
recon:lambda x:Bool -> Bool.if x false then true else false;[]
recon:if x false then true else false;[x : Bool -> Bool]
recon:x false;[x : Bool -> Bool]
recon:x;[x : Bool -> Bool]
recon:false;[x : Bool -> Bool]
recon:true;[x : Bool -> Bool]
recon:false;[x : Bool -> Bool]
recon:lambda x:Bool.if x then false else true;[]
recon:if x then false else true;[x : Bool]
recon:x;[x : Bool]
recon:false;[x : Bool]
recon:true;[x : Bool]
true : Bool
recon:lambda x:Nat.succ x;[]
recon:succ x;[x : Nat]
recon:x;[x : Nat]
lambda x:Nat.succ x : Nat -> Nat
recon:(lambda x:Nat.succ (succ x)) 1;[]
recon:lambda x:Nat.succ (succ x);[]
recon:succ (succ x);[x : Nat]
recon:succ x;[x : Nat]
recon:x;[x : Nat]
recon:1;[]
recon:0;[]
3 : Nat
recon:lambda x:A.x;[]
recon:x;[x : A]
lambda x:A.x : A -> A
recon:lambda x:X.lambda y:X -> X.y x;[]
recon:lambda y:X -> X.y x;[x : X]
recon:y x;[y : X -> X, x : X]
recon:y;[y : X -> X, x : X]
recon:x;[y : X -> X, x : X]
lambda x:X.lambda y:X -> X.y x : X -> (X -> X) -> X
recon:(lambda x:X -> X.x 0) (lambda y:Nat.y);[]
recon:lambda x:X -> X.x 0;[]
recon:x 0;[x : X -> X]
recon:x;[x : X -> X]
recon:0;[x : X -> X]
recon:lambda y:Nat.y;[]
recon:y;[y : Nat]
0 : Nat
recon:lambda x.x 0;[]
recon:x 0;[x : ?X6]
recon:x;[x : ?X6]
recon:0;[x : ?X6]
lambda x.x 0 : (Nat -> ?X7) -> ?X7
recon:let f = lambda x.x in f f (f 0);[]
recon:(lambda x.x) (lambda x.x) ((lambda x.x) 0);[]
recon:(lambda x.x) (lambda x.x);[]
recon:lambda x.x;[]
recon:x;[x : ?X8]
recon:lambda x.x;[]
recon:x;[x : ?X9]
recon:(lambda x.x) 0;[]
recon:lambda x.x;[]
recon:x;[x : ?X11]
recon:0;[]
0 : Nat
recon:let g = lambda x.1 in g (g g);[]
recon:(lambda x.1) ((lambda x.1) (lambda x.1));[]
recon:lambda x.1;[]
recon:1;[x : ?X14]
recon:0;[x : ?X14]
recon:(lambda x.1) (lambda x.1);[]
recon:lambda x.1;[]
recon:1;[x : ?X15]
recon:0;[x : ?X15]
recon:lambda x.1;[]
recon:1;[x : ?X16]
recon:0;[x : ?X16]
1 : Nat
